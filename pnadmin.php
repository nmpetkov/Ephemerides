<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id: pnadmin.php 420 2010-06-14 04:56:34Z drak $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_Value_Addons
 * @subpackage Ephemerids
 */

/**
 * the main administration function
 * This function is the default function, and is called whenever the
 * module is initiated without defining arguments.  As such it can
 * be used for a number of things, but most commonly it either just
 * shows the module menu and returns or calls whatever the module
 * designer feels should be the default function (often this is the
 * view() function)
 * @author Mark West
 * @return string HTML string
 */
function Ephemerids_admin_main()
{
    // Security check
    if (!SecurityUtil::checkPermission('Ephemerids::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $Renderer = & Renderer::getInstance('Ephemerids', false);

    // Return the output that has been generated by this function
    return $Renderer->fetch('ephemerids_admin_main.htm');
}

/**
 * Add a new ephemerid
 * This is a standard function that is called whenever an administrator
 * wishes to create a new module item
 * @author Mark West
 * @return string HTML string
 */
function Ephemerids_admin_new()
{
    // Security check
    if (!SecurityUtil::checkPermission('Ephemerids::', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $Renderer = & Renderer::getInstance('Ephemerids', false);

    // Assign the default language
    $Renderer->assign('language', ZLanguage::getLanguageCode());

    // Return the output that has been generated by this function
    return $Renderer->fetch('ephemerids_admin_new.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by Ephemerids_admin_new() to create a new item
 * @author Mark West
 * @param 'Date_Day' the day of the emphererid
 * @param 'Date_Month' the month of the emphererid
 * @param 'Date_Year' the year of the emphererid
 * @param 'content' the ephmerid description
 * @param 'language' the language of the ephemerid
 * @return mixed ephemerid id on success, false on failiure
 */
function Ephemerids_admin_create($args)
{
    // get transation domain
    $dom = ZLanguage::getModuleDomain('Ephemerids');

    // Get parameters from whatever input we need
    $ephemerid = FormUtil::getPassedValue('ephemerid', isset($args['ephemerid']) ? $args['ephemerid'] : null, 'POST');

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (ModUtil::url('Ephemerids', 'admin', 'view'));
    }

    // Notable by its absence there is no security check here.  This is because
    // the security check is carried out within the API function

    // Create the ephemerid via the API
    $eid = ModUtil::apiFunc('Ephemerids', 'admin', 'create',
                        array('did' => $ephemerid['Date_Day'],
                              'mid' => $ephemerid['Date_Month'],
                              'yid' => $ephemerid['Date_Year'],
                              'content' => $ephemerid['content'],
                              'language' => isset($ephemerid['language']) ? $ephemerid['language'] : ''));

    if ($eid != false) {
        // Success
        LogUtil::registerStatus(__('Done! Ephemerid created.', $dom));
    }

    return System::redirect(ModUtil::url('Ephemerids', 'admin', 'view'));
}

/**
 * Modify an ephemerid
 * This is a standard function that is called whenever an administrator
 * wishes to modify a current module item
 * @author Mark West
 * @param 'eid' the id of the item to be modified
 * @param 'objectid' generic object id maps to eid if presents
 * @return string HTML string
 */
function Ephemerids_admin_modify($args)
{
    // get transation domain
    $dom = ZLanguage::getModuleDomain('Ephemerids');

    $eid = FormUtil::getPassedValue('eid', isset($args['eid']) ? $args['eid'] : null, 'GET');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'GET');

    if (!empty($objectid)) {
        $eid = $objectid;
    }

    $item = ModUtil::apiFunc('Ephemerids', 'user', 'get', array('eid' => $eid));
    if ($item == false) {
        return LogUtil::registerError(__('No such ephemerid found.', $dom), 404);
    }

    // Security check
    if (!SecurityUtil::checkPermission('Ephemerids::', "::$eid", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // calulate date for use in template
    $item['date'] = $item['yid'] . '-' . $item['mid'] . '-' . $item['did'];

    // Create output object
    $Renderer = & Renderer::getInstance('Ephemerids', false);

    // assign the item to the template
    $Renderer->assign( $item);

    // Return the output that has been generated by this function
    return $Renderer->fetch('ephemerids_admin_modify.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by Ephemerids_admin_modify() to update a current item
 * @author Mark West
 * @param 'eid' the id of the ephemerid
 * @param 'objectid' generic object id maps to eid if present
 * @param 'Date_Day' the day of the emphererid
 * @param 'Date_Month' the month of the emphererid
 * @param 'Date_Year' the year of the emphererid
 * @param 'content' the ephmerid description
 * @param 'language' the language of the ephemerid
 * @return bool true on update success, false on failiure
 */
function Ephemerids_admin_update($args)
{
    // get transation domain
    $dom = ZLanguage::getModuleDomain('Ephemerids');

    // Get parameters from whatever input we need
    $ephemerid = FormUtil::getPassedValue('ephemerid', isset($args['ephemerid']) ? $args['ephemerid'] : null, 'POST');
    if (!empty($ephemerid['objectid'])) {
        $ephemerid['eid'] = $ephemerid['objectid'];
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (ModUtil::url('Ephemerids', 'admin', 'view'));
    }

    // Notable by its absence there is no security check here.  This is because
    // the security check is carried out within the API function

    // Update the ephemerid
    if (ModUtil::apiFunc('Ephemerids', 'admin', 'update',
                    array('eid' => $ephemerid['eid'],
                          'did' => $ephemerid['Date_Day'],
                          'mid' => $ephemerid['Date_Month'],
                          'yid' => $ephemerid['Date_Year'],
                          'content' => $ephemerid['content'],
                          'language' => isset($ephemerid['language']) ? $ephemerid['language'] : ''))) {
        // Success
        LogUtil::registerStatus(__('Done! Ephemerid updated.', $dom));
    }

    return System::redirect(ModUtil::url('Ephemerids', 'admin', 'view'));
}

/**
 * Delete an ephemerid
 * This is a standard function that is called whenever an administrator
 * wishes to delete a current module item.  Note that this function is
 * the equivalent of both of the modify() and update() functions above as
 * it both creates a form and processes its output.  This is fine for
 * simpler functions, but for more complex operations such as creation and
 * modification it is generally easier to separate them into separate
 * functions.  There is no requirement in the Zikula MDG to do one or the
 * other, so either or both can be used as seen appropriate by the module
 * developer
 * @author Mark West
 * @param 'eid' the id of the ephemerid to be deleted
 * @param 'objectid' generic object id maps to eid if present
 * @param 'confirmation' confirmation that this item can be deleted
 * @return mixed HTML string if no confirmation, true if delete successful, false otherwise
 */
function Ephemerids_admin_delete($args)
{
    // get transation domain
    $dom = ZLanguage::getModuleDomain('Ephemerids');

    $eid = FormUtil::getPassedValue('eid', isset($args['eid']) ? $args['eid'] : null, 'REQUEST');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
    if (!empty($objectid)) {
        $eid = $objectid;
    }

    $item = ModUtil::apiFunc('Ephemerids', 'user', 'get', array('eid' => $eid));

    if ($item == false) {
        return LogUtil::registerError(__('No such ephemerid found.', $dom), 404);
    }

    // Security check
    if (!SecurityUtil::checkPermission('Ephemerids::', "::$eid", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Check for confirmation.
    if (empty($confirmation)) {
        // No confirmation yet - display a suitable form to obtain confirmation
        // of this action from the user

        // Create output object
        $Renderer = & Renderer::getInstance('Ephemerids', false);

        // Ephemerid ID
        $Renderer->assign('eid', $eid);

        // Return the output that has been generated by this function
        return $Renderer->fetch('ephemerids_admin_delete.htm');
    }

    // If we get here it means that the user has confirmed the action

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError(ModUtil::url('Ephemerids', 'admin', 'view'));
    }

    // Delete the ephemerid
    if (ModUtil::apiFunc('Ephemerids', 'admin', 'delete', array('eid' => $eid))) {
        // Success
        LogUtil::registerStatus(__('Done! Ephemerid deleted.', $dom));
    }

    return System::redirect(ModUtil::url('Ephemerids', 'admin', 'view'));
}

/**
 * View ephemerids
 * This is a standard function called to present the administrator with a list
 * of all items held by the module.
 * @author Mark West
 * @return string HTML string
 */
function Ephemerids_admin_view()
{
    // get transation domain
    $dom = ZLanguage::getModuleDomain('Ephemerids');

    // Security check
    if (!SecurityUtil::checkPermission('Ephemerids::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');

    // Create output object
    $Renderer = & Renderer::getInstance('Ephemerids', false);

    // The user API function is called.  This takes the number of items
    // required and the first number in the list of all items, which we
    // obtained from the input and gets us the information on the appropriate
    // items.
    $items = ModUtil::apiFunc('Ephemerids', 'user', 'getall',
                          array('startnum' => $startnum,
                                'numitems' => ModUtil::getVar('Ephemerids', 'itemsperpage')));

    if (isset($items) && is_array($items)) {
        foreach ($items as $k => $item)
        {
            $row = array();
            if (SecurityUtil::checkPermission('Ephemerids::', "::$item[eid]", ACCESS_READ)) {
                $options = array();
                if (SecurityUtil::checkPermission('Ephemerids::', "::$item[eid]", ACCESS_EDIT)) {
                    $options[] = array('url' => ModUtil::url('Ephemerids', 'admin', 'modify', array('eid' => $item['eid'])),
                                       'image' => 'xedit.gif',
                                       'title' => __('Edit', $dom));
                    if (SecurityUtil::checkPermission('Ephemerids::', "::$item[eid]", ACCESS_DELETE)) {
                        $options[] = array('url' => ModUtil::url('Ephemerids', 'admin', 'delete', array('eid' => $item['eid'])),
                                           'image' => '14_layer_deletelayer.gif',
                                           'title' => __('Delete', $dom));
                    }
                }
                $items[$k]['options'] = $options;

                if ($item['yid'] < 1970) {
                    $item['yid'] = 1970;
                }
                $items[$k]['datetime'] = DateUtil::formatDatetime(mktime(0, 0, 0, $item['mid'], $item['did'], $item['yid']), 'datelong');
            }
        }
    }
    $Renderer->assign('ephemerids', $items);

    // Assign the values for the smarty plugin to produce a pager
    $Renderer->assign('pager', array('numitems' => ModUtil::apiFunc('Ephemerids', 'user', 'countitems'),
                                     'itemsperpage' => ModUtil::getVar('Ephemerids', 'itemsperpage')));

    return $Renderer->fetch('ephemerids_admin_view.htm');
}

/**
 * This is a standard function to modify the configuration parameters of the
 * module
 * @author Mark West
 * @return stringHTML string
 */
function Ephemerids_admin_modifyconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission('Ephemerids::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $Renderer = & Renderer::getInstance('Ephemerids', false);

    // Number of items to display per page
    $Renderer->assign(ModUtil::getVar('Ephemerids'));

    // Return the output that has been generated by this function
    return $Renderer->fetch('ephemerids_admin_modifyconfig.htm');
}

/**
 * This is a standard function to update the configuration parameters of the
 * module given the information passed back by the modification form
 * @author Mark West
 * @return bool true if update successful, false otherwise
 */
function Ephemerids_admin_updateconfig()
{
    // get transation domain
    $dom = ZLanguage::getModuleDomain('Ephemerids');

    // Security check
    if (!SecurityUtil::checkPermission('Ephemerids::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (ModUtil::url('Ephemerids', 'admin', 'view'));
    }

    $itemsperpage = FormUtil::getPassedValue('itemsperpage', 25, 'POST');
    ModUtil::setVar('Ephemerids', 'itemsperpage', $itemsperpage);

    // Let any other modules know that the modules configuration has been updated
    ModUtil::callHooks('module','updateconfig','Ephemerids', array('module' => 'Ephemerids'));

    // the module configuration has been updated successfuly
    LogUtil::registerStatus(__('Done! Saved module configuration.', $dom));

    return System::redirect(ModUtil::url('Ephemerids', 'admin', 'view'));
}
